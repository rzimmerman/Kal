describe 'Wait For Statement', ->
  it 'should accept single arguments', (done) ->
    task callbacker (arg1)
      return arg1 + 1
    wait for x from callbacker 5
    x.should.equal 6
    done()

  it 'should accept multiple arguments', (done) ->
    task callbacker2 (arg1, arg2, arg3)
      return arg1 + 1, arg2 - 1, arg3 + 2
    wait for x, y, z from callbacker2 5, 6, 7
    x.should.equal 6
    y.should.equal 5
    z.should.equal 9
    done()

  it 'should work inside of if statements', (done) ->
    task callbacker3(arg1)
      return arg1 * 2
    x = 2
    if x is 2
      wait for y from callbacker3 7
      n = 2
    else
      wait for z from callbacker3 8
    y.should.equal 14
    n.should.equal 2
    (z doesnt exist).should.be.true
    done()

  it 'should work inside of else if statements', (done) ->
    task callbacker3(arg1)
      return arg1 * 2
    x = 2
    if x is 5
      wait for y from callbacker3 7
      n = 2
    else if x is 2
      n = 4
      wait for z from callbacker3 8
    else
      n = 5
    z.should.equal 16
    n.should.equal 4
    (y doesnt exist).should.be.true
    done()

  it 'should work inside of nested if statements (1)', (done) ->
    task callbacker3(arg1)
      return arg1 * 2
    x = 5
    if x is 5 #true
      wait for y from callbacker3 7
      if y is 3
        y = 10
        n = 0
      else #true, it's 14
        n = 0
        wait for y from callbacker3 y
        n = 0
        y += 1 #28+1=29
      n = 2
    else if x is 2
      n = 4
      wait for z from callbacker3 8
    else
      n = 5
      if yes
        wait for p from callbacker3 1
    y.should.equal 29
    n.should.equal 2
    (p doesnt exist).should.be.true
    (z doesnt exist).should.be.true
    done()

  it 'should work inside of nested if statements (2)', (done) ->
    task callbacker4(arg1)
      return arg1 * 2
    x = 1
    if x is 5
      wait for y from callbacker4 7
      if y is 3
        y = 10
        n = 0
      else #true, it's 14
        n = 0
        wait for y from callbacker4 y
        n = 0
        y += 1 # 28+1=29
      n = 2
    else if x is 2
      n = 4
      wait for z from callbacker4 8
    else # true
      n = 5
      if yes
        wait for p from callbacker4 1
    p.should.equal 2
    n.should.equal 5
    (t doesnt exist).should.be.true
    (z doesnt exist).should.be.true
    done()

  it 'should work inside of nested if statements (3)', (done) ->
    task callbacker5(arg1)
      return arg1 * 3
    x = 2
    y = 3
    if x is 5
      wait for z from callbacker5 7
      if y is 3
        z = 10
        n = 0
      else
        n = 1
        wait for y from callbacker5 y
        n = 0
        y += 1
      n = 2
    else if x is 2 # true
      n = 4
      if y isnt 3
        z = 10
      else #true
        if x is 2 # true
          wait for z from callbacker5 8
          z += 1
      if z is 25 # true
        wait for z from callbacker5 z
    else #true
      n = 5
      if yes
        wait for p from callbacker4 1
    z.should.equal 75
    n.should.equal 4
    done()

  it 'should work inside of for parallel in loops', (done) ->
    task callbacker3(arg1)
      return arg1 * 2
    output = []
    for parallel i in [1,2,3,4]
      wait for j from callbacker3 i
      output.push j
    expected = [2,4,6,8]

    for o in output
      (o in expected).should.be.true
    done()

  it 'should only call back once from for parallel loops', (done) -> # gh-63
    function callbacker99(next)
      setTimeout next, 0
    counter = 0
    task callbacker98()
      for parallel i in [1,2,3,4]
        wait for ish from callbacker99()
        counter += 1
      return counter
    wait for c from callbacker98()
    c.should.equal 4
    done()


  it 'should work inside of for serial in loops', (done) ->
    task callbacker3(arg1)
      return arg1 * 2
    output = []
    for series i in [1,2,3,4]
      wait for j from callbacker3 i
      output.push j
    expected = [2,4,6,8]

    output.should.eql expected
    done()

  it 'should handle nested loops (1)', (done) ->
    task shrinker(i)
      return i - 9
    task decrementer(i)
      return i - 1
    grids = [[[1,2,3],[4,5,6],[7,8,9]],[[10,11,12],[13,14,15],[16,17,18]]]
    sum = 0
    for parallel grid in grids
      grid.length.should.equal 3
      for series row in grid
        row.length.should.equal 3
        for parallel column in row
          if column > 9
            wait for icolumn from shrinker(column)
            sum += icolumn
          else
            sum += column
    sum.should.equal 90
    done()

  it 'should handle nested loops (2)', (done) ->
    task shrinker(i)
      return i - 9
    task decrementer(i)
      return i - 1
    grids = [[[1,2,3],[4,5,6],[7,8,9]],[[10,11,12],[13,14,15],[16,17,18]]]
    sum = 0
    for series grid in grids
      grid.length.should.equal 3
      for series row in grid
        row.length.should.equal 3
        for series column in row
          if column > 9
            wait for icolumn from shrinker(column)
          else
            icolumn = column
          while icolumn > 0
            wait for icolumn from decrementer(icolumn)
            sum += 1
    sum.should.equal 90
    done()


  it 'should handle nested loops (3)', (done) ->
    task shrinker(i)
      return i - 9
    task decrementer(i)
      return i - 1
    grids = [[[1,2,3],[4,5,6],[7,8,9]],[[10,11,12],[13,14,15],[16,17,18]]]
    sum = 0
    g = 5
    if g is 5
      wait for g from decrementer(g)
      g.should.equal 4
      for parallel grid in grids
        grid.length.should.equal 3
        if grid[0][0] isnt 1
          for series row in grid
            row.length.should.equal 3
            for parallel column in row
              if column > 9
                wait for icolumn from shrinker(column)
                sum += icolumn
              else
                sum += column
        else
          wait for x from decrementer(grid.length)
          sum += x
    sum.should.equal 45+3-1
    done()

  it 'should support try/catch statements in callback loops', (done) ->
    task shrinker(i)
      return i - 9
    task decrementer(i)
      return i - 1
    grids = [[[1,2,3],[4,5,6],[7,8,9]],[[10,11,12],[13,14,15],[16,17,18]]]
    sum = 0
    for parallel grid in grids
      grid.length.should.equal 3
      try
        for series row in grid
          row.length.should.equal 3
          for parallel column in row
            wait for icolumn from decrementer(column)
            if icolumn >= 9
              fail with "TOO BIG"
            else
              sum += icolumn + 1
      catch e
        sum += 1
    sum.should.equal 45 + 9 #because the inner loop is parallel, all 9 items will throw errors, it will not exit early
    done()


  it 'should work inside of while loops', (done) ->
    task callbacker3(arg1)
      return arg1 * 2
    output = []
    i = 1
    while i <= 4
      wait for j from callbacker3 i
      output.push j
      i += 1
    expected = [2,4,6,8]

    output.should.eql expected
    done()

  it 'should throw when called back with an error from a task', (done) ->
    task callbacker10(arg1)
      fail with "error!!!"
    error_happened = no
    try
      wait for x from callbacker10 5
    catch e
      e.should.equal "error!!!"
      error_happened = yes
    error_happened.should.be.true
    done()

  it 'should preserve try/catch blocks within callbacks', (done) ->
    task callbacker11(arg1)
      return arg1
    caught = []
    try
      wait for x from callbacker11 5
      fail with 'test1'
    catch e
      e.should.equal 'test1'
      caught.push 1
    try
      try
        wait for x from callbacker11 5
        fail with 'test2'
      catch e
        e.should.equal 'test2'
        caught.push 2
      fail with 'test3'
    catch e
      e.should.equal 'test3'
      caught.push 3
    caught.should.eql [1,2,3]
    done()

  it 'should work if the called task takes no arguments', (done) ->
    task callbacker4()
      return 5
    wait for x from callbacker4()
    x.should.equal 5
    done()

  #gh-52
  it 'should support for of loops with callbacks (serial)', (done) ->
    task callbacker12(arg1)
      return arg1+3
    obj = {'this':1,'is':2,'a':3,'test':4}
    s = ""
    for series p of obj
      s += p
      wait for x from callbacker12(obj[p])
      s += x
    s.should.equal "this4is5a6test7"
    done()

  #gh-52
  it 'should support for of loops with callbacks (parallel)', (done) ->
    task callbacker13(arg1)
      return arg1+3
    obj1 = {'this':1,'is':2,'a':3,'test':4}
    obj2 = {}
    t = 0
    for parallel p of obj1
      t += obj1[p]
      wait for x from callbacker13(obj1[p])
      obj2[p] = x
    t.should.equal 1+2+3+4
    obj2.should.eql {'this':4,'is':5,'a':6,'test':7}
    done()

  it 'should accept tail conditionals', (done) ->
    task callbacker15 (arg1)
      return arg1 * 2
    a = 1
    wait for x from callbacker15 5 when a isnt 1
    wait for x from callbacker15 6 when a is 1
    wait for x from callbacker15 x
    x.should.equal 6 * 2 * 2
    done()

  it 'should support a "safe wait for" syntax for nonstandard callbacks', (done) ->
    function nscallbacker1(arg1, next)
      next arg1 * 10
    task callbacker97(arg1)
      return arg1 * 20
    a = 3
    safe wait for x from nscallbacker1 a
    x.should.equal 30
    try
      wait for x from nscallbacker1 a
    catch e
      e.should.equal 30
    safe wait for x, y from callbacker97(a)
    (x exists).should.be.false
    y.should.equal 60
    done()

it 'should work with other nested cases', (done) ->
  task tester99(ev)
    task thing()
      return 'text'
    try
      if ev.match /.*\.txt/
        wait for return_text from thing()
        ev.should.equal 'test.txt'
      else if ev is 'error'
        throw 'ish'
      else
        # for a non-text file, asynchronously read the file size
        wait for file_stats from thing()
        return_text = 'File of size '+ file_stats
        ev.should.equal 'test.dat'
      (return_text in ['text', 'File of size text']).should.be.true
    catch e
      e.should.equal 'ish'
      ev.should.equal 'error'
  for series text in ['test.txt','test.dat','error']
    wait for n from tester99 text
  done()

  it 'should accept mutliple return values', (done) ->
    task boring(b)
      return b, b+1, b+2
    wait for x, y, z from boring(10)
    x.should.equal 10
    y.should.equal 11
    z.should.equal 12
    wait for (x, y, z) from boring(2)
    x.should.equal 2
    y.should.equal 3
    z.should.equal 4
    done()
