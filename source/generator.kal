KEYWORD_TRANSLATE =
  'yes':        'true'
  'on':         'true'
  'no':         'false'
  'off':        'false'
  'is':         '==='
  'isnt':       '!=='
  '==':         '==='
  '!=':         '!=='
  'and':        '&&'
  'but':        '&&'
  'or':         '||'
  'xor':        '^'
  '^':          'pow'
  'mod':        '%'
  'not':        '!'
  'new':        'new '
  'me':         'this'
  'this':       'this'
  'null':       'null'
  'nothing':    'null'
  'none':       'null'
  'break':      'break'
  'throw':      'throw'
  'raise':      'throw'
  'instanceof': 'instanceof'
  'of':         'in'
  'EndOfList':  'undefined'
  'fail':       'throw'
  'bitwise and':'&'
  'bitwise or': '|'
  'bitwise xor': '^'
  'bitwise not': '~'

load = function load (grammar)
  apply_generator_to_grammar.apply grammar
exports.load = load

function apply_generator_to_grammar()
  scopes = []
  scope = {}
  try_block_stack = []
  try_block_stacks = []
  parfor_cb = null
  parfor_cb_stack = []

  callback_counter = 0
  current_callback = "k$cb0"
  current_callbacks = []

  function create_callback()
    callback_counter += 1
    current_callback = "k$cb#{callback_counter}"
    return current_callback

  function cancel_callback()
    callback_counter -= 1 when callback_counter > 0
    current_callback = "k$cb#{callback_counter}"
    return current_callback

  class_defs = []
  class_def = {}

  function push_class()
    class_defs.push class_def
    class_def = {name: '', code: '',args: [],has_constructor: no}

  function pop_class()
    class_def = class_defs.pop()
    return class_def

  use_snippets = {}

  function push_scope()
    scopes.push scope
    try_block_stacks.push try_block_stack
    try_block_stack = []
    parfor_cb_stack.push parfor_cb
    parfor_cb = null
    new_scope = {}
    current_callbacks.push current_callback
    for k of scope
      v = scope[k]
      if v is 'no closures'
        v = v #do nothing
      else if v is 'closures ok' or v is 'argument' or v is 'function'
        new_scope[k] = 'closure'
      else if v is 'closure'
        new_scope[k] = 'closure'
    scope = new_scope

  function pop_scope(code, wrap)
    rv = ""
    var_names = []
    for var_name of scope
      if not (scope[var_name] in ['closure', 'argument', 'function', 'class definition']) and var_name isnt 'k$next'
        var_names.push(var_name)
    if wrap
      rv += '(function () {'
    if var_names.length > 0
      rv += 'var ' + var_names.join(', ') + ';'
    rv += code
    if wrap
      rv += "})()"
    if scopes isnt []
      scope = scopes.pop()
    try_block_stack = try_block_stacks.pop()
    current_callback = current_callbacks.pop()
    parfor_cb = parfor_cb_stack.pop()
    return rv

  function check_existence_wrapper(code, undefined_unary, invert)
    if undefined_unary
      rv = "(typeof #{code} === 'undefined' || #{code} === null)" when invert otherwise "(typeof #{code} !== 'undefined' && #{code} !== null)"
    else
      rv = "#{code} == null" when invert otherwise "#{code} != null"
    return rv

  self = me

  me.File.prototype.js = (options) ->
    scopes = []
    scope = {}
    try_block_stack = []
    try_block_stacks = []
    parfor_cb = null
    parfor_cb_stack = []
    callback_counter = 0
    current_callback = 'k$cb0'
    current_callbacks = []
    class_defs = []
    class_def = {name: '',code: '',args: [],has_constructor: no}
    use_snippets = {}
    me.callback = current_callback
    me.bare = options.bare
    code = self.Block.prototype.js.apply me
    snip = []
    for key of use_snippets
      snip.push use_snippets[key]
    snip = snip.join '\n'
    rv = [snip, code].join '\n'
    for comment in me.ts.comments # reset the AST modifications in case something else wants to use it
      comment.written = null
    rv += "}" when current_callback isnt 'k$cb0'
    return pop_scope(rv, not options.bare)

  me.Statement.prototype.js = ->
    rv = ''
    pf = ''
    for comment in me.ts.comments
      if comment.line < me.line + 1 and not comment.written
        comment.written = yes
        if comment.post_fix
          pf += '\n' when comment.multiline
          pf += ' ' when not comment.multiline
          pf += '/*' + comment.value + '*/'
        else
          rv += '/*' + comment.value + '*/\n'
    me.statement.in_conditional = me.in_conditional
    me.statement.in_loop = me.in_loop
    me.statement.parent_block = me.parent_block
    me.statement.callback = me.callback
    me.statement.original_callback = me.original_callback
    rv += me.statement.js()
    if pf isnt ''
      if rv.match /\n/
        rv = rv.replace /\n/, pf + '\n'
      else
        rv += pf
    return rv

  me.ThrowStatement.prototype.js = ->
    if try_block_stack.length is 0 but scope['k$next'] exists
      rv = "return k$next.apply(this, [#{me.expr.js()}]);"
    else
      rv = "throw #{me.expr.js()};"
    rv = me.conditional.js(rv, no) if me.conditional?
    return rv

  me.ReturnStatement.prototype.js = ->
    exprs_js = [expr.js() for expr in me.exprs]
    exprs_js.unshift 'null' when scope['k$next'] exists
    arg_list = exprs_js.join(', ')
    if scope['k$next'] exists
      scope['k$rv'] = 'no closures'
      rv = "k$rv = [#{arg_list}]; return k$next.apply(this, k$rv);"
      rv = me.conditional.js(rv, no) when me.conditional exists
      return rv
    else
      rv = "return"
      if me.exprs.length is 1
        rv += " " + arg_list
      else if me.exprs.length > 1
        rv += "[#{arg_list}]"
      rv += ";"
      rv = me.conditional.js(rv, no) when me.conditional exists
      return rv

  me.ExpressionStatement.prototype.js = ->
    rv = me.expr.js()
    if rv is ""
      return ""
    else
      return rv + ";"

  me.Expression.prototype.js = (oop_reverse) ->
    rv = ''
    if oop_reverse
      left_code = ''
    else
      left_code = me.left.js()
    if not me.op?
      rv += left_code
    else
      opjs = me.op.js()
      if opjs is 'in' and me.op.op.value isnt 'of'
        unless use_snippets['in']?
          use_snippets['in'] = snippets['in']
          for subscope in scopes
            subscope['$kindexof'] = 'closure'
          scope['$kindexof'] = 'closure'
        rv += "($kindexof.call(#{me.right.left.js()}, #{left_code}) >= 0) #{me.right.js(true)}"
      else if opjs is 'nor'
        rv += "!(#{left_code} || #{me.right.js()})"
      else if opjs is 'pow'
        rv += "Math.pow(#{left_code}, #{me.right.left.js()}) #{me.right.js(true)}"
      else
        rv += "#{left_code} #{opjs} #{me.right.js()}"
    if me.op?.invert
      rv = "!(#{rv})"
    rv = me.conditional.js(rv, yes) if me.conditional exists
    return rv


  me.UnaryExpression.prototype.js = ->
    rv = ''
    if me.base.type is 'IDENTIFIER'
      base_val = me.base.value
      kw_translate = KEYWORD_TRANSLATE[base_val]
      rv += kw_translate or base_val
      if kw_translate doesnt exist
        scope[base_val] = 'closures ok' unless scope[base_val] exists or (not me.is_lvalue()) or me.accessors.length > 0
    else
      rv += me.base.js()

    # an undefined unary is a simple variable access to an undeclared variable
    # it requres we check if the variable exists before checking if it is null/undefined
    undefined_unary = (me.base.type is 'IDENTIFIER' and scope[base_val] doesnt exist and kw_translate doesnt exist)
    existence_qualifiers = []

    last_accessor = me.accessors[me.accessors.length-1]
    for accessor in me.accessors
      existence_qualifiers.push accessor.js_existence rv, undefined_unary, last_accessor.invert
      rv += accessor.js()
      undefined_unary = no # only possible for the first accessor

    existence_check = []
    for eq in existence_qualifiers
      if eq isnt ""
        existence_check.push eq
    existence_check = existence_check.join(' && ')
    if existence_check isnt ""
      if last_accessor instanceof self.ExisentialCheck
        rv = "(#{existence_check})"
      else
        closeout = "void 0"
        rv = "((#{existence_check}) ? #{rv} : #{closeout})"

    preop_value = me.preop?.value
    if preop_value is 'new'
      rv = "#{KEYWORD_TRANSLATE[preop_value]} #{rv}"
    else if preop_value is 'not'
      preop_value = "bitwise not" if me.bitwise
      rv = "#{KEYWORD_TRANSLATE[preop_value]}(#{rv})"
    else if preop_value is '-'
      rv = "-#{rv}"
    return rv

  me.WhenExpression.prototype.js = (true_block_js, must_return_value) ->
    conditional_js = me.condition.js()
    if me.specifier.value is 'unless' or me.specifier.value is 'except'
      conditional_js = "!(#{conditional_js})"
    if me.false_expr exists
      return "(#{conditional_js}) ? #{true_block_js} : #{me.false_expr.js()}"
    else
      if must_return_value
        return "(#{conditional_js}) ? #{true_block_js} : void 0"
      else
        return "if (#{conditional_js}) {#{true_block_js}}"
    return rv

  me.ExisentialCheck.prototype.js = ->
    return ""

  me.ExisentialCheck.prototype.js_existence = (accessor, undefined_unary, invert) ->
    return check_existence_wrapper(accessor, undefined_unary, invert)

  me.PropertyAccess.prototype.js = ->
    if me.expr.type is 'IDENTIFIER'
      rv = me.expr.value
    else
      rv = me.expr.js()
    rv = ".#{rv}"
    return rv
  me.PropertyAccess.prototype.js_existence = (accessor, undefined_unary, invert) ->
    if me.exisential
      return check_existence_wrapper(accessor, undefined_unary, invert)
    else
      return ''

  me.AssignmentStatement.prototype.js = ->
    op = me.assignOp.value
    if op isnt '='
      op += '='
    rv = "#{me.lvalue.js()} #{op} #{me.rvalue.js()};"
    rv = me.conditional.js(rv, no) if me.conditional exists
    return rv

  me.NumberConstant.prototype.js = ->
    return me.token.text

  me.StringConstant.prototype.js = ->
    rv = me.token.value
    return rv

  me.RegexConstant.prototype.js = ->
    return me.token.text

  me.BinOp.prototype.js = ->
    op_value = me.op.value
    op_value = "bitwise #{op_value}" if me.bitwise
    return KEYWORD_TRANSLATE[op_value] or me.op.value

  me.IfStatement.prototype.js = ->
    me.original_callback = me.callback unless me.original_callback exists
    conditional_js = me.conditional.js()
    cb_counter = callback_counter
    if me.condition.value is 'unless' or me.condition.value is 'except'
      conditional_js = "!(#{conditional_js})"
    rv = "if (#{conditional_js}) {"
    me.block.in_conditional = yes
    me.block.in_loop = me.in_loop
    for else_clause in me.elses
      else_clause.block.in_conditional = yes
      else_clause.block.in_loop = me.in_loop
    inner_js = me.js_no_callbacks()
    if (me.callback isnt current_callback) and (not me.is_else_if)
      callback_counter = cb_counter
      inner_js = me.js_callbacks()
    return rv + inner_js

  me.IfStatement.prototype.js_no_callbacks = ->
    me.block.callback = me.callback
    block_js = me.block.js() + me.block.js_closeout() + '}'
    else_js = ""
    for else_clause in me.elses
      else_clause.block.callback = me.callback
      else_clause.block.original_callback = me.original_callback
      else_js += " else "
      if else_clause.conditional exists
        else_js += "if (#{else_clause.conditional.js()})"
      else_js += " {"
      else_js += else_clause.block.js() + else_clause.block.js_closeout()
      else_js += '}'
    return block_js + else_js

  me.IfStatement.prototype.js_callbacks = ->
    me.callback = create_callback()
    me.block.callback = me.callback
    me.block.original_callback = me.callback
    block_js = me.block.js()
    for else_clause in me.elses
      else_clause.block.callback = me.callback
      else_clause.block.original_callback = me.callback
      else_clause.block_js = " else "
      if else_clause.conditional exists
        else_clause.block_js += "if (#{else_clause.conditional.js()})"
      else_clause.block_js += " {"
      else_clause.block_js += else_clause.block.js()
    block_js += me.block.js_closeout() + '}'
    else_js = ""
    for else_clause in me.elses
      else_js += else_clause.block_js + else_clause.block.js_closeout() + '}'
    use_snippets['async'] = snippets['async']
    callback_js = "return $kasync(#{me.callback},this);"
    callback_js += "function #{me.callback}() {"
    callback_js += render_try_blocks()
    me.parent_block.closeout_callback = me.original_callback

    create_callback() #generate a new callback for future if statements/for loops
    return block_js + else_js + callback_js

  me.BlankStatement.prototype.js = ->
    return ''

  for_depth = 1
  me.ForStatement.prototype.js = ->
    me.callback = current_callback
    me.loop_block.in_loop = yes
    me.loop_block.in_conditional = me.in_conditional
    rv = ""
    iterator   = "ki$#{for_depth}"
    terminator = "kobj$#{for_depth}"
    loop_counter = "klc$#{for_depth}"
    for_depth += 1
    loop_block_js = me.loop_block.js() + me.loop_block.js_closeout()
    if me.callback isnt current_callback #something in this loop uses callbacks
      return me.js_callbacks iterator, terminator, loop_counter
    else #normal for loop
      scope[iterator] = 'no closures'
      scope[terminator] = 'no closures'
      if me.type.value is 'in'
        rv += "#{terminator} = #{me.iterable.js()};for (#{iterator} = 0; #{iterator} < #{terminator}.length; #{iterator}++) {"
        rv += "#{me.iterant.js()} = #{terminator}[#{iterator}];"
      else
        rv += "#{terminator} = #{me.iterable.js()};for (#{me.iterant.js()} in #{terminator}) {"
        rv += "if (#{terminator}.hasOwnProperty(#{me.iterant.js()})) {"
      rv += loop_block_js
      rv += "}" when me.type.value isnt 'in'
      rv += "}"
    return rv
  me.ForStatement.prototype.js_callbacks = (iterator, terminator, loop_counter) ->
    rv = ""
    if me.execution_style?.value is 'parallel'
      loop_callback = create_callback()
      me.callback = create_callback()
      me.loop_block.callback = loop_callback
      me.loop_block.original_callback = loop_callback
      parfor_cb_stack.push parfor_cb
      parfor_cb = loop_callback
      scope[iterator] = 'no closures'
      scope[terminator] = 'no closures'
      rv += "(function (#{loop_counter}) {"
      rv += "#{terminator} = #{me.iterable.js()};"
      if me.type.value is 'in'
        rv += "for (#{iterator} = 0; #{iterator} < #{terminator}.length; #{iterator}++) {"
      else
        rv += "for (#{iterator} in #{terminator}) {"
      rv += "(function (#{me.iterant.js()}) {"
      rv += render_try_blocks()
      rv += "#{loop_counter}++;"
      rv += me.loop_block.js() + me.loop_block.js_closeout()
      rv += render_catch_blocks()
      if me.type.value is 'in'
        rv += "})(#{terminator}[#{iterator}]);"
      else
        rv += "})(#{iterator});"
      rv += "}"
      use_snippets['async'] = snippets['async']
      rv += "return $kasync(#{loop_callback},this);"
      rv += "function #{loop_callback}() {"
      rv += "if (--#{loop_counter} == 0) return #{me.callback}();"
      rv += "}"
      rv += "})(1);"
      rv += "return;"
      rv += "function #{me.callback}() {"
      rv += render_try_blocks()
      me.parent_block.closeout_callback = me.original_callback
      parfor_cb = parfor_cb_stack.pop()
    else
      me.callback = create_callback()
      me.loop_block.callback = "k$lcb"
      me.loop_block.original_callback = "k$lcb"
      use_snippets['async'] = snippets['async']
      if me.type.value is 'in'
        rv += "return $kasync(#{loop_counter},this,[0,#{me.iterable.js()},#{me.iterable.js()}[0]]);"
      else
        scope[terminator] = 'no closures'
        scope[iterator] = 'no closures'
        rv += "#{terminator} = []; for (#{iterator} in #{me.iterable.js()}) {if ((#{me.iterable.js()}).hasOwnProperty(#{iterator})) {#{terminator}.push(#{iterator})};}"
        rv += "return $kasync(#{loop_counter},this,[0,#{terminator},#{terminator}[0]]);"
      rv += "function #{loop_counter} (k$i,k$obj,#{me.iterant.js()}) {"
      rv += render_try_blocks()
      rv += "k$i++;"
      rv += "var k$lcb = function () {if (k$i < k$obj.length) return #{loop_counter}.apply(this,[k$i,k$obj,k$obj[k$i]]); else return #{me.callback}.apply(this);};"
      rv += me.loop_block.js() + me.loop_block.js_closeout()
      rv += render_catch_blocks()
      rv += "}"
      rv += "function #{me.callback}() {"
      rv += render_try_blocks()
      me.parent_block.closeout_callback = me.original_callback
    return rv

  while_depth = 1
  me.WhileStatement.prototype.js = ->
    me.block.in_loop = yes
    me.block.in_conditional = me.in_conditional
    rv = "while (#{me.expr.js()}) {"
    rv += me.block.js() + me.block.js_closeout()
    rv += "}"
    if me.callback isnt current_callback
      return me.js_callbacks()
    else
      return rv

  me.WhileStatement.prototype.js_callbacks = ->
    rv = ""
    while_depth += 1
    while_wrapper = "kw$#{while_depth}"
    me.callback = create_callback()
    me.block.callback = "k$lcb"
    me.block.original_callback = "k$lcb"
    use_snippets['async'] = snippets['async']
    rv += "return #{while_wrapper}();"
    rv += "function #{while_wrapper} () {"
    rv += render_try_blocks()
    rv += "var k$lcb = function () {if (#{me.expr.js()}) return $kasync(#{while_wrapper},this); else return $kasync(#{me.callback},this);};"
    rv += me.block.js() + me.block.js_closeout()
    rv += render_catch_blocks()
    rv += "}"
    rv += "function #{me.callback}() {"
    rv += render_try_blocks()
    me.parent_block.closeout_callback = me.original_callback
    return rv

  me.Block.prototype.js = ->
    me.callback = current_callback unless me.callback exists
    me.original_callback = current_callback unless me.original_callback exists
    previous_cb = current_callback
    me.callbacks = []
    rv = []
    for statement in me.statements
      statement.parent_block = me
      statement.callback = me.callback
      statement.original_callback = me.original_callback
      statement.in_conditional = me.in_conditional
      statement.in_loop = me.in_loop
      rv.push statement.js()
      if current_callback isnt previous_cb
        me.callbacks.unshift me.callback
        me.callback = current_callback
        previous_cb = current_callback
    rv = rv.join '\n'
    if me.callbacks.length > 0
      if scope['k$next'] exists
        rv += "var k$done = (typeof k$next == 'function') ? k$next : function (){}; k$next=function (){}; return k$done();"
    return rv

  me.Block.prototype.js_closeout = ->
    rv = ""
    if me.closeout_callback exists and me.callbacks.length isnt 0 and (me.in_conditional or me.in_loop)
      use_snippets['async'] = snippets['async']
      rv += "return $kasync(#{me.closeout_callback},this);"
    for callback in me.callbacks
      rv += render_catch_blocks()
      rv += "}"
    return rv

  me.ParenExpression.prototype.js = ->
    return "(#{me.expr.js()})"

  me.IndexExpression.prototype.js = ->
    return "[#{me.expr.js()}]"
  me.IndexExpression.prototype.js_existence = (accessor, undefined_unary, invert) ->
    if me.exisential
      return check_existence_wrapper(accessor, undefined_unary, invert)
    else
      return ''

  me.ListExpression.prototype.js = ->
    if me.comprehension doesnt exist
      rv = []
      for item in me.items
        rv.push item.js()
      rv = rv.join(', ')
      return "[#{rv}]"
    else
      return me.comprehension.js()

  me.ListComprehension.prototype.js = ->
    use_snippets['array list comprehension'] = snippets['array list comprehension']
    scope[me.iterant.value] = 'closures ok'
    rv = "$kcomprl(#{me.iterable.js()},function($ki){#{me.iterant.value} = $ki;return #{me.iter_expr.js()};})"
    return rv

  me.ObjectComprehension.prototype.js = ->
    use_snippets['object list comprehension'] = snippets['object list comprehension']
    rv = ""
    if me.property_iterant exists
      scope[me.property_iterant.value] = 'closures ok'
      rv += "#{me.property_iterant.value} = $kp;"
    if me.value_iterant exists
      scope[me.value_iterant.value] = 'closures ok'
      rv += "#{me.value_iterant.value} = $kv;"
    rv = "$kcompro(#{me.iterable.js()},function($kp,$kv){#{rv};return #{me.iter_expr.js()};})"
    return rv

  me.MapItem.prototype.js = ->
    return "#{me.key.js()}: #{me.val.js()}"

  me.MapExpression.prototype.js = ->
    rv = []
    for item in me.items
      rv.push item.js()
    rv = rv.join(', ')
    return "{ #{rv} }"

  me.FunctionExpression.prototype.js = ->
    me.args = []
    me.callback = 'k$next' when me.specifier.value is 'task'
    if class_defs.length > 0 and me.name exists #is a member function/method
      if me.specifier.value is 'method' and me.name.value is 'initialize'
        class_def.code += me.js_constructor()
        return ""
      else
        return me.js_class_member()
    else
      return me.js_bare_function()

  me.FunctionExpression.prototype.js_bare_function   = ->
    rv = "function "
    if me.name exists
      rv += me.name.value
    for argument in me.arguments
      me.args.push argument.name.value
    return rv + me.js_body()

  me.FunctionExpression.prototype.js_class_member   = ->
    if me.specifier.value is 'method'
      rv = "#{class_def.name}.prototype.#{me.name.value} = function"
    else
      rv = "#{class_def.name}.#{me.name.value} = function"
    for argument in me.arguments
      me.args.push argument.name.value
    return rv + me.js_body()

  me.FunctionExpression.prototype.js_constructor = ->
    class_def.has_constructor = yes
    rv = "function #{class_def.name}"
    class_def.args = []
    for argument in me.arguments
      class_def.args.push argument.name.value
    me.args = class_def.args
    rv += me.js_body class_def.args
    class_def.args.push me.callback_arg when me.callback_arg exists
    return rv

  me.FunctionExpression.prototype.js_body = ->
    rv = ""
    push_scope()
    scope['k$next'] = me.callback when me.callback exists
    for arg_name in me.args
      scope[arg_name] = 'argument'
    block_code = me.block.js(yes) + me.block.js_closeout()
    if me.callback exists
      me.args.push me.callback
      block_code = "try {" + block_code
    rv += pop_scope(block_code, no)
    if me.callback exists
      rv += "} catch (k$err) {if (k$next) {return k$next.apply(this,[k$err]);} else {throw k$err;}}"
      rv += "return k$next ? k$next() : void 0;"
    rv += "}"
    rv = " (#{me.args.join(', ')}) {" + rv
    return rv

  me.FunctionCall.prototype.js = (as_list) ->
    rv = []
    for argument in me.arguments
      rv.push argument.js()
    rv.push me.callback_name if me.callback_name exists
    rv = rv.join ', '
    if as_list
      return "[#{rv}]"
    else
      return "(#{rv})"

  me.FunctionCall.prototype.js_existence = (accessor, undefined_unary, invert) ->
    if me.exisential
      return check_existence_wrapper(accessor, undefined_unary, invert)
    else
      return ''

  me.FunctionCallArgument.prototype.js = ->
    return me.val.js()

  me.ClassDefinition.prototype.js = ->
    push_scope()
    push_class()
    class_def.name = me.name.value
    class_def.parent = me.parent?.value
    block_code = me.block.js() + me.block.js_closeout()
    block_code = pop_scope block_code, no
    rv = class_def.code
    unless class_def.has_constructor
      rv += "function #{class_def.name} () {"
      if me.parent?
        rv += "return #{me.parent.value}.prototype.constructor.apply(this,arguments);"
      rv += "}"
    if me.parent?
      rv += "__extends(#{me.name.value},#{me.parent.value});"
      use_snippets['inherits'] = snippets['inherits']
    rv += block_code
    pop_class()
    return rv

  function render_try_blocks()
    rv = ""
    for try_block in try_block_stack
      rv += try_block.js_wrapper_try()
    return rv

  function render_catch_blocks()
    rv = ""
    for try_block in try_block_stack
      rv += try_block.js_wrapper_catch()
    return rv

  me.TryCatch.prototype.js = ->
    try_block_stack.unshift me
    me.try_block.in_conditional = yes
    me.try_block.in_loop = me.in_loop
    me.original_callback = me.callback unless me.original_callback exists
    rv = me.js_no_callbacks()

    if me.callback isnt current_callback
      me.callback = create_callback()
      me.closeout_callback = me.callback
      rv = me.js_callbacks()
    else
      try_block_stack.shift()
    return rv

  me.TryCatch.prototype.js_no_callbacks = ->
    rv = me.js_wrapper_try()
    me.try_block.original_callback = me.original_callback
    rv += me.try_block.js() + me.try_block.js_closeout()
    rv += me.js_wrapper_catch()
    return rv
  me.TryCatch.prototype.js_callbacks = ->
    rv = me.js_wrapper_try()
    me.try_block.original_callback = me.callback
    rv += me.try_block.js() + me.try_block.js_closeout()
    rv += me.js_wrapper_catch()
    rv += "function #{me.callback}() {"
    try_block_stack.shift()
    rv += render_try_blocks()
    me.parent_block.closeout_callback = me.original_callback
    return rv
  me.TryCatch.prototype.js_wrapper_try = ->
    rv = "try {"
    return rv
  me.TryCatch.prototype.js_wrapper_catch = ->
    try_block_stack[0].in_catch = yes when try_block_stack[0] exists #bit of a hack until we support catch callbacks
    rv = "}"
    loop_clearout_js = ""
    if me.catch_block exists
      rv += " catch (#{me.identifier?.value or 'k$e'}) {"
      rv += me.catch_block.js() + me.catch_block.js_closeout()
    else
      rv += " catch (k$e) {"
    if parfor_cb exists
      rv += "return #{parfor_cb}();"
    else if me.closeout_callback exists
      rv += "return #{me.closeout_callback}();"
    rv += '}'
    try_block_stack[0].in_catch = no when try_block_stack[0] exists
    return rv

  me.SuperStatement.prototype.js = ->
    return "" when class_def.parent doesnt exist
    rv = "#{class_def.parent}.prototype.constructor.apply(this,"
    if me.accessor exists
      rv += me.accessor.js(yes)
    else
      rv += "arguments"
    rv += ");"
    return rv

  me.WaitForStatement.prototype.js = ->
    throw new Error "wait fors not supported in catch blocks" when try_block_stack[0]?.in_catch
    prefix = "" if me.parent_block.bare otherwise "return "
    me.new_callback = create_callback()
    me.rvalue.callback_args = me.lvalue
    me.rvalue.accessors[me.rvalue.accessors.length - 1].callback_name = me.new_callback
    rv = "#{prefix}#{me.rvalue.js()};"
    if me.conditional exists
      rv = me.conditional.js(rv, no)
      rv += "#{prefix}#{me.new_callback}();"
    rv_block = ""
    arg_i = 0 when me.no_errors otherwise 1
    for argument in me.lvalue.arguments
      rv_block += "#{argument.base.value} = arguments[#{arg_i}];"
      scope[argument.base.value] = 'closures ok' unless scope[argument.base.value] exists
      arg_i += 1
    me.block.in_conditional = me.in_conditional
    me.block.in_loop = me.in_loop
    rv_block += me.block.js()
    rv += "function #{me.new_callback} () {"
    rv += render_try_blocks()
    rv += "if (arguments[0] != null) throw arguments[0];" except when me.no_errors
    rv += rv_block
    if me.in_conditional or me.in_loop
      use_snippets['async'] = snippets['async']
      rv += "#{prefix}$kasync(#{me.parent_block.callback},this);"
    else if scope['k$next']
      rv += "#{prefix}k$next ? k$next() : void 0;"
    rv += me.block.js_closeout()
    return rv

  snippets =
    'in': 'var $kindexof = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };'
    'inherits': 'var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }'
    'array list comprehension':'var $kcomprl = function (iterable,func) {var o = []; if (iterable instanceof Array) {for (var i=0;i<iterable.length;i++) {o.push(func(iterable[i]));}} else if (typeof(iterable.next) == "function") {var i; while ((i = iterable.next()) != null) {o.push(func(i));}} else {throw "Object is not iterable";}return o;};'
    'object list comprehension':'var $kcompro = function (obj,func) {var o = []; for (var k in obj) {o.push(func(k,obj[k]));}return o;}'
    'async': 'var $kasync = (typeof process === "undefined" || !(process.nextTick)) ? (function (fn,self,args) {setTimeout(function () {fn.apply(self,args);}, 0);}) : (function (fn,self,args) {process.nextTick(function () {fn.apply(self,args);});});'
