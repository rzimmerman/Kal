# External dependencies.
fs             = require 'fs'
path           = require 'path'
Kal            = require './kal'

function printLine(line)
  process.stdout.write line + '\n'
function printWarn(line)
  process.stderr.write line + '\n'

function hidden(file)
  /^\.|~$/.test file

function parseOptions()
  options = {}
  for arg in process.argv
    if arg[0] is '-' and arg[1] isnt '-'
      options.help       = yes if 'h' in arg
      options.tokens     = yes if 't' in arg
      options.javascript = yes if 'j' in arg
      options.bare       = yes if 'b' in arg
      options.version    = yes if 'v' in arg
      options.minify     = yes if 'm' in arg
    else if arg[0] is '-' and arg[1] is '-'
      options.help       = yes if arg is '--help'
      options.tokens     = yes if arg is '--tokens'
      options.javascript = yes if arg is '--javascript'
      options.bare       = yes if arg is '--bare'
      options.version    = yes if arg is '--version'
      options.minify     = yes if arg is '--minify'

  if '-o' in process.argv
    index = process.argv.indexOf '-o'
  else if '--output' in process.argv
    index = process.argv.indexOf '--output'

  options.output = process.argv[index + 1] if index isnt -1

  inputs = []
  last_switch = null
  for arg in process.argv.slice(2)
    if arg[0] is '-' or arg is options.output
      options.help = yes if inputs.length isnt 0
      inputs = []
    else
      inputs.push arg
  options._ = inputs
  return options

existsSync = fs.existsSync or path.existsSync

run = function run()
  options = parseOptions()
  return version() if options.version
  return usage() if options.help
  if options.output exists and not existsSync(options.output)
    printWarn('output path does not exist!')
    return usage()
  return require('./interactive') if options._.length is 0
  process.argv[0] = 'kal'
  process.execPath = require.main.filename

  compile_options = {}
  compile_options.show_tokens = options.tokens
  compile_options.bare = options.bare
  compile_options.show_js = options.javascript

  if options.output exists
    # make sure uglify is installed if the minify option is used
    try
      require('uglify-js') if options.minify
    catch
      printWarn 'error: uglify-js must be installed to use the --minify option'
      process.exit(3)
    # if the user just specified one directory, assume they just want all the files in it
    if options._.length is 1 and fs.statSync(options._[0]).isDirectory()
      files = [path.join(options._[0],file) for file in fs.readdirSync(options._[0])]
      compile_files files, options.output, compile_options, options.minify
    else
      compile_files options._, options.output, compile_options, options.minify
  else
    for filename in options._
      Kal.eval fs.readFileSync(filename), compile_options
exports.run = run

function compile_files(filenames, output_dir, options, minify)
  for filename in filenames
    stat = fs.statSync filename
    if stat.isDirectory()
      new_outdir = path.join(output_dir, path.basename(filename))
      fs.mkdirSync new_outdir, stat.mode
      subfiles = [path.join(filename, child) for child in fs.readdirSync(filename)]
      compile_files subfiles, new_outdir, options, minify
    else if path.extname(filename) is '.kal'
      options.filename = filename
      options.module_name = path.basename(filename, '.kal')
      js_output = Kal.compile fs.readFileSync(filename), options
      if minify
        js_output = require('uglify-js').minify(js_output, {fromString:yes,mangle:no}).code
      printLine js_output if options.show_js
      js_filename = path.join(output_dir, path.basename(filename, '.kal')) + '.js'
      fs.writeFileSync js_filename, js_output

function version()
  printLine "Kal version #{Kal.VERSION}"
  process.exit(0)

function usage()
  print "Usage: kal [options] SOURCE [-o OUTPUT_DIR]"
  print ""
  print "If called without the -o option, `kal` will run SOURCE."
  print "If called without any options, `kal` will start an interactive session."
  print ""
  print ""
  print "Options:"
  print "  --help, -h        show the command line usage options                  [boolean]"
  print "  --tokens, -t      print out the tokens that the lexer/sugarer produce  [boolean]"
  print "  --javascript, -j  print out the compiled javascript                    [boolean]"
  print "  --bare, -b        don't wrap the output in a function                  [boolean]"
  print "  --version, -v     display the version number                           [boolean]"
  print "  --output, -o      the output directory for the compiled source"
  print "  --minify          minify the output (requires uglify-js)               [boolean]"
  process.exit(2)
